#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

#define TINT_ISOLATE_UB(VOLATILE_NAME) \
  {volatile bool VOLATILE_NAME = false; if (VOLATILE_NAME) break;}

struct tint_private_vars_struct {
  uint shadingSsboIndex;
};

struct FSIn {
  uint2 ssboIndicesVar;
  float2 localCoordsVar;
};

struct FSOut {
  float4 sk_FragColor;
};

struct IntrinsicUniforms {
  float4 viewport;
  float4 dstCopyBounds;
};

struct FSUniformData {
  /* 0x0000 */ float2 baseFrequency_1;
  /* 0x0008 */ float2 stitchData_1;
  /* 0x0010 */ int noiseType_1;
  /* 0x0014 */ int numOctaves_1;
  /* 0x0018 */ int stitching_1;
  /* 0x001c */ tint_array<int8_t, 4> tint_pad;
  /* 0x0020 */ float4x4 matrix_4;
  /* 0x0060 */ float4 translate_4;
  /* 0x0070 */ int inHSL_4;
  /* 0x0074 */ int clampRGB_4;
  /* 0x0078 */ tint_array<int8_t, 8> tint_pad_1;
};

struct FSUniforms {
  /* 0x0000 */ tint_array<FSUniformData, 1> fsUniformData;
};

void _skslMain(FSIn _stageIn, thread FSOut* const _stageOut, thread tint_private_vars_struct* const tint_private_vars, const device FSUniforms* const tint_symbol_7, texture2d<float, access::sample> tint_symbol_8, sampler tint_symbol_9, texture2d<float, access::sample> tint_symbol_10, sampler tint_symbol_11) {
  {
    (*(tint_private_vars)).shadingSsboIndex = _stageIn.ssboIndicesVar[1];
    int const _56_d = (*(tint_symbol_7)).fsUniformData[(*(tint_private_vars)).shadingSsboIndex].noiseType_1;
    float2 _57_k = float2(((_stageIn.localCoordsVar + 0.5f) * (*(tint_symbol_7)).fsUniformData[(*(tint_private_vars)).shadingSsboIndex].baseFrequency_1));
    float4 _58_l = float4(0.0f);
    float2 _59_m = float2((*(tint_symbol_7)).fsUniformData[(*(tint_private_vars)).shadingSsboIndex].stitchData_1);
    float _60_n = 1.0f;
    {
      int _61_o = 0;
      while(true) {
        TINT_ISOLATE_UB(tint_volatile_false);
        if ((_61_o < (*(tint_symbol_7)).fsUniformData[(*(tint_private_vars)).shadingSsboIndex].numOctaves_1)) {
          {
            float4 _62_f = 0.0f;
            float2 const _skTemp2 = floor(_57_k);
            _62_f = float4(_skTemp2, _62_f.zw);
            _62_f = float4(_62_f.xy, (_62_f.xy + float2(1.0f)));
            if (bool((*(tint_symbol_7)).fsUniformData[(*(tint_private_vars)).shadingSsboIndex].stitching_1)) {
              float4 const _skTemp3 = step(_59_m.xyxy, _62_f);
              _62_f = (_62_f - (_skTemp3 * _59_m.xyxy));
            }
            float4 const tint_symbol_1 = tint_symbol_8.sample(tint_symbol_9, float2(float2(((_62_f[0] + 0.5f) * 0.00390625f), 0.5f)), bias(-0.47499999403953552246f));
            float const _63_g = tint_symbol_1[0];
            float4 const tint_symbol_2 = tint_symbol_8.sample(tint_symbol_9, float2(float2(((_62_f[2] + 0.5f) * 0.00390625f), 0.5f)), bias(-0.47499999403953552246f));
            float const _64_h = tint_symbol_2[0];
            float2 _65_i = float2(_63_g, _64_h);
            if (false) {
              float2 const _skTemp4 = floor(((_65_i * float2(255.0f)) + float2(0.5f)));
              _65_i = (_skTemp4 * float2(0.0039215688593685627f));
            }
            float4 _66_j = ((256.0f * _65_i.xyxy) + _62_f.yyww);
            _66_j = (_66_j * float4(0.00390625f));
            float4 const _67_p = _66_j;
            float2 const _skTemp5 = fract(_57_k);
            float2 const _68_d = _skTemp5;
            float2 const _skTemp6 = smoothstep(float2(0.0f), float2(1.0f), _68_d);
            float2 const _69_e = _skTemp6;
            float4 _71_g = 0.0f;
            {
              int _72_h = 0;
              while(true) {
                TINT_ISOLATE_UB(tint_volatile_false_1);
                {
                  float const _73_i = ((float(_72_h) + 0.5f) * 0.25f);
                  float4 const _74_j = tint_symbol_10.sample(tint_symbol_11, float2(float(_67_p[0]), float(_73_i)), bias(-0.47499999403953552246f));
                  float4 const _75_k = tint_symbol_10.sample(tint_symbol_11, float2(float(_67_p[1]), float(_73_i)), bias(-0.47499999403953552246f));
                  float4 const _76_l = tint_symbol_10.sample(tint_symbol_11, float2(float(_67_p[3]), float(_73_i)), bias(-0.47499999403953552246f));
                  float4 const _77_m = tint_symbol_10.sample(tint_symbol_11, float2(float(_67_p[2]), float(_73_i)), bias(-0.47499999403953552246f));
                  float2 _78_n = _68_d;
                  float const _skTemp7 = dot((((_74_j.yw + (_74_j.xz * 0.00390625f)) * 2.0f) - 1.0f), _78_n);
                  float _79_o = _skTemp7;
                  _78_n[0] = (_78_n[0] - 1.0f);
                  float const _skTemp8 = dot((((_75_k.yw + (_75_k.xz * 0.00390625f)) * 2.0f) - 1.0f), _78_n);
                  float _80_p = _skTemp8;
                  float const _skTemp9 = mix(_79_o, _80_p, _69_e[0]);
                  float const _81_q = _skTemp9;
                  _78_n[1] = (_78_n[1] - 1.0f);
                  float const _skTemp10 = dot((((_76_l.yw + (_76_l.xz * 0.00390625f)) * 2.0f) - 1.0f), _78_n);
                  _80_p = _skTemp10;
                  _78_n[0] = (_78_n[0] + 1.0f);
                  float const _skTemp11 = dot((((_77_m.yw + (_77_m.xz * 0.00390625f)) * 2.0f) - 1.0f), _78_n);
                  _79_o = _skTemp11;
                  float const _skTemp12 = mix(_79_o, _80_p, _69_e[0]);
                  float const _82_r = _skTemp12;
                  float const _skTemp13 = mix(_81_q, _82_r, _69_e[1]);
                  _71_g[_72_h] = _skTemp13;
                }
                {
                  _72_h = as_type<int>((as_type<uint>(_72_h) + as_type<uint>(1)));
                  if ((_72_h >= 4)) { break; }
                }
              }
            }
            float4 _83_q = _71_g;
            if ((_56_d != 0)) {
              float4 const _skTemp14 = fabs(_83_q);
              _83_q = _skTemp14;
            }
            _58_l = (_58_l + (_83_q * _60_n));
            _57_k = (_57_k * float2(2.0f));
            _60_n = (_60_n * 0.5f);
            _59_m = (_59_m * float2(2.0f));
          }
        } else {
          break;
        }
        {
          _61_o = as_type<int>((as_type<uint>(_61_o) + as_type<uint>(1)));
        }
      }
    }
    if ((_56_d == 0)) {
      _58_l = ((_58_l * float4(0.5f)) + float4(0.5f));
    }
    float4 const _skTemp15 = saturate(_58_l);
    _58_l = _skTemp15;
    float const _skTemp16 = dot(float3(0.21259999275207519531f, 0.71520000696182250977f, 0.07220000028610229492f), float4(float3((float3(_58_l.xyz) * float(_58_l[3]))), float(float(_58_l[3]))).xyz);
    float const _skTemp17 = saturate(_skTemp16);
    float4 _84_a = float4(0.0f, 0.0f, 0.0f, _skTemp17);
    int const _85_d = (*(tint_symbol_7)).fsUniformData[(*(tint_private_vars)).shadingSsboIndex].inHSL_4;
    if (bool(_85_d)) {
      {
        float4 _skTemp18 = 0.0f;
        if ((_84_a[1] < _84_a[2])) {
          _skTemp18 = float4(_84_a.zy, -1.0f, 0.6666666865348815918f);
        } else {
          _skTemp18 = float4(_84_a.yz, 0.0f, -0.3333333432674407959f);
        }
        float4 const _86_e = _skTemp18;
        float4 _skTemp19 = 0.0f;
        if ((_84_a[0] < _86_e[0])) {
          _skTemp19 = float4(_86_e[0], _84_a[0], _86_e.yw);
        } else {
          _skTemp19 = float4(_84_a[0], _86_e[0], _86_e.yz);
        }
        float4 const _87_f = _skTemp19;
        float const _88_h = _87_f[0];
        float const _skTemp20 = fmin(_87_f[1], _87_f[2]);
        float const _89_i = (_88_h - _skTemp20);
        float const _90_j = (_88_h - (_89_i * 0.5f));
        float const _skTemp21 = fabs((_87_f[3] + ((_87_f[1] - _87_f[2]) / ((_89_i * 6.0f) + 0.00009999999747378752f))));
        float const _91_k = _skTemp21;
        float const _skTemp22 = fabs(((_90_j * 2.0f) - _84_a[3]));
        float const _92_l = (_89_i / ((_84_a[3] + 0.00009999999747378752f) - _skTemp22));
        float const _93_m = (_90_j / (_84_a[3] + 0.00009999999747378752f));
        _84_a = float4(_91_k, _92_l, _93_m, _84_a[3]);
      }
    } else {
      {
        float const _skTemp23 = fmax(_84_a[3], 0.00009999999747378752f);
        _84_a = float4((_84_a.xyz / _skTemp23), _84_a[3]);
      }
    }
    float4 _94_f = float4((((*(tint_symbol_7)).fsUniformData[(*(tint_private_vars)).shadingSsboIndex].matrix_4 * float4(_84_a)) + (*(tint_symbol_7)).fsUniformData[(*(tint_private_vars)).shadingSsboIndex].translate_4));
    if (bool(_85_d)) {
      {
        float const _skTemp24 = fabs(((2.0f * _94_f[2]) - 1.0f));
        float const _95_b = ((1.0f - _skTemp24) * _94_f[1]);
        float3 const _96_c = (_94_f.xxx + float3(0.0f, 0.6666666865348815918f, 0.3333333432674407959f));
        float3 const _skTemp25 = fract(_96_c);
        float3 const _skTemp26 = fabs(((_skTemp25 * 6.0f) - 3.0f));
        float3 const _skTemp27 = saturate((_skTemp26 - 1.0f));
        float3 const _97_d = _skTemp27;
        float4 const _skTemp28 = saturate(float4(((((_97_d - 0.5f) * _95_b) + _94_f[2]) * _94_f[3]), _94_f[3]));
        _94_f = _skTemp28;
      }
    } else {
      {
        if (bool((*(tint_symbol_7)).fsUniformData[(*(tint_private_vars)).shadingSsboIndex].clampRGB_4)) {
          float4 const _skTemp29 = saturate(_94_f);
          _94_f = _skTemp29;
        } else {
          float const _skTemp30 = saturate(_94_f[3]);
          _94_f[3] = _skTemp30;
        }
        _94_f = float4((_94_f.xyz * _94_f[3]), _94_f[3]);
      }
    }
    float4 const outColor_0 = _94_f;
    (*(_stageOut)).sk_FragColor = outColor_0;
  }
}

struct tint_symbol_4 {
  uint2 ssboIndicesVar [[user(locn0)]] [[flat]];
  float2 localCoordsVar [[user(locn1)]];
};

struct tint_symbol_5 {
  float4 sk_FragColor [[color(0)]];
};

FSOut tint_symbol_inner(FSIn _stageIn, thread tint_private_vars_struct* const tint_private_vars, const device FSUniforms* const tint_symbol_12, texture2d<float, access::sample> tint_symbol_13, sampler tint_symbol_14, texture2d<float, access::sample> tint_symbol_15, sampler tint_symbol_16) {
  FSOut _stageOut = {};
  _skslMain(_stageIn, &(_stageOut), tint_private_vars, tint_symbol_12, tint_symbol_13, tint_symbol_14, tint_symbol_15, tint_symbol_16);
  return _stageOut;
}

fragment tint_symbol_5 tint_symbol(const device FSUniforms* tint_symbol_17 [[buffer(0)]], texture2d<float, access::sample> tint_symbol_18 [[texture(0)]], sampler tint_symbol_19 [[sampler(0)]], texture2d<float, access::sample> tint_symbol_20 [[texture(1)]], sampler tint_symbol_21 [[sampler(1)]], tint_symbol_4 tint_symbol_3 [[stage_in]]) {
  thread tint_private_vars_struct tint_private_vars = {};
  FSIn const tint_symbol_6 = {.ssboIndicesVar=tint_symbol_3.ssboIndicesVar, .localCoordsVar=tint_symbol_3.localCoordsVar};
  FSOut const inner_result = tint_symbol_inner(tint_symbol_6, &(tint_private_vars), tint_symbol_17, tint_symbol_18, tint_symbol_19, tint_symbol_20, tint_symbol_21);
  tint_symbol_5 wrapper_result = {};
  wrapper_result.sk_FragColor = inner_result.sk_FragColor;
  return wrapper_result;
}

